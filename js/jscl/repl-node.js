#!/usr/bin/env node
(function(jscl){
'use strict';
(function(values, internals){
var l1=internals.make_lisp_string('loading repl-node/repl.lisp!');
console.log(internals.xstring(l1));
var l2=internals.intern('*RL*');
l2;
var l3=internals.intern('NODE-INIT');
var l4=internals.intern('*STANDARD-OUTPUT*','COMMON-LISP');
var l5=internals.intern('WRITE-FN','KEYWORD');
l5.value=l5;
var l6=internals.intern('*ROOT*');
var l7=internals.make_lisp_string('process');
var l8=internals.make_lisp_string('stdout');
var l9=internals.make_lisp_string('write');
var l10=internals.intern('MAKE-STREAM');
var l11=internals.make_lisp_string('process');
var l12=internals.intern('NIL','COMMON-LISP');
var l13=internals.make_lisp_string('stdin');
var l14=internals.make_lisp_string('process');
var l15=internals.make_lisp_string('stdout');
var l16=internals.make_lisp_string('readline');
var l17=internals.make_lisp_string('createInterface');
var l18=internals.intern('WELCOME-MESSAGE');
var l19=internals.make_lisp_string('CL-USER> ');
var l20=internals.make_lisp_string('setPrompt');
var l21=internals.make_lisp_string('prompt');
var l22=internals.make_lisp_string('line');
var l23=internals.make_lisp_string('message');
var l24=internals.intern('T','COMMON-LISP');
var l25=internals.make_lisp_string('ERROR[!]: ~a~%');
var l26=internals.intern('FORMAT','COMMON-LISP');
var l27=internals.intern('*HANDLER-BINDINGS*');
var l28=internals.intern('ERROR','COMMON-LISP');
var l29=internals.make_lisp_string('message');
var l30=internals.intern('%ERROR');
var l31=internals.intern('LIST','COMMON-LISP');
var l32=internals.intern('READ-FROM-STRING','COMMON-LISP');
var l33=internals.intern('EVAL-INTERACTIVE');
var l34=internals.intern('PRINT','COMMON-LISP');
var l35=internals.make_lisp_string('ERROR: ');
var l36=internals.intern('!CONDITION-ARGS');
var l37=internals.intern('TERPRI','COMMON-LISP');
var l38=internals.make_lisp_string('prompt');
var l39=internals.make_lisp_string('on');
l3.fvalue=(function(){var FUNC=(function JSCL_USER_NODEINIT(values){internals.checkArgsAtMost(arguments.length-1,0);
var v1=this;
return (function(){l4.value=l10.fvalue(internals.pv,l5.value,(function JSCL_USER_NIL(values,v3){internals.checkArgs(arguments.length-1,1);
var v4=this;
return internals.js_to_lisp(internals.symbolValue(l6)[internals.xstring(l7)][internals.xstring(l8)][internals.xstring(l9)](internals.lisp_to_js(v3)));
}));
l2.value=internals.js_to_lisp(internals.symbolValue(l6)[internals.xstring(l16)][internals.xstring(l17)](internals.lisp_to_js(internals.js_to_lisp((function(){var TMP=internals.symbolValue(l6)[internals.xstring(l11)];
if (TMP===undefined) return l12.value;
TMP=TMP[internals.xstring(l13)];
return TMP===undefined?l12.value:TMP;
})())),internals.lisp_to_js(internals.js_to_lisp((function(){var TMP=internals.symbolValue(l6)[internals.xstring(l14)];
if (TMP===undefined) return l12.value;
TMP=TMP[internals.xstring(l15)];
return TMP===undefined?l12.value:TMP;
})()))));
l18.fvalue(internals.pv);
return (function(v5){return internals.bindSpecialBindings([l6],[v5],(function(){internals.js_to_lisp(internals.symbolValue(l6)[internals.xstring(l20)](internals.lisp_to_js(l19)));
internals.js_to_lisp(internals.symbolValue(l6)[internals.xstring(l21)]());
return internals.js_to_lisp(internals.symbolValue(l6)[internals.xstring(l39)](internals.lisp_to_js(l22),internals.lisp_to_js((function JSCL_USER_NIL(values,v28){internals.checkArgs(arguments.length-1,1);
var v29=this;
(function(){try{return (function(){try{var v33=[];
return (function(v34){return (function(){var v35=1;
var v36=[];
TBLOOP:while (true){try{switch(v35){case 1:(function(v37){return internals.bindSpecialBindings([l27],[v37],(function(){(function(){var v39=new internals.Cons(l28,(function JSCL_USER_NIL(values,v40){internals.checkArgs(arguments.length-1,1);
var v41=this;
v34=v40;
return (function(){throw new internals.TagNLX(v36,2);
})();
}));
var v42=new internals.Cons(v39,internals.symbolValue(l27));
return l27.value=v42;
})();
return (function(){try{return (function(){throw new internals.BlockNLX(v33,(function(v45){return (function(){return (function(v47,v48){(function(){while (v47!==l12.value){v48=internals.car(v47);
l34.fvalue(internals.pv,v48);
l12.value;
v47=internals.cdr(v47);
}return l12.value;
})();
return l12.value;
})(v45,l12.value);
})();
})((function(){var FUNC=internals.symbolFunction(l31);
var ARGS=[internals.pv];
return (function(){var values=internals.mv;
var VS;
VS=l33.fvalue(values,l32.fvalue(internals.pv,v28));
if (typeof VS==='object'&&'multiple-value' in VS) ARGS=ARGS.concat(VS);
 else ARGS.push(VS);
return FUNC.apply(null,ARGS);
})();
})()),'G130');
})();
}catch (v43){v43=internals.js_to_lisp(v43);
return (internals.isNLX(v43)?l24.value:l12.value)!==l12.value?(function(){throw v43;
})():l30.fvalue(internals.pv,(function(v44){return v44!==l12.value?v44:v43;
})(internals.js_to_lisp((function(){var TMP=v43[internals.xstring(l29)];
return TMP===undefined?l12.value:TMP;
})())));
}})();
}));
})(internals.symbolValue(l27));
case 2:(function(){throw new internals.BlockNLX(v33,(function(v49){l26.fvalue(internals.pv,l24.value,l35);
(function(){var F=internals.symbolFunction(l26);
var ARGS=[internals.pv,l24.value];
var TAIL=l36.fvalue(internals.pv,v49);
while (TAIL!=l12.value){ARGS.push(TAIL.car);
TAIL=TAIL.cdr;
}return (typeof F==='function'?F:F.fvalue).apply(this,ARGS);
})();
return l37.fvalue(internals.pv);
})(v34),'G130');
})();
default:break TBLOOP;
}}catch (JUMP){if (JUMP instanceof internals.TagNLX&&JUMP.id==v36) v35=JUMP.label;
 else throw JUMP;
}}return l12.value;
})();
})(l12.value);
}catch (CF){if (CF instanceof internals.BlockNLX&&CF.id==v33) return CF.values;
 else throw CF;
}})();
}catch (v30){v30=internals.js_to_lisp(v30);
return (function(v32){return l26.fvalue(internals.pv,l24.value,l25,v32);
})((function(v31){return v31!==l12.value?v31:v30;
})(internals.js_to_lisp((function(){var TMP=v30[internals.xstring(l23)];
return TMP===undefined?l12.value:TMP;
})())));
}})();
return internals.js_to_lisp(internals.symbolValue(l2)[internals.xstring(l38)]());
}))));
}));
})(internals.symbolValue(l2));
})();
});
FUNC.fname='NODE-INIT';
return FUNC;
})();
l3;
l3.fvalue(internals.pv);
})(jscl.internals.pv, jscl.internals);
})( typeof require !== 'undefined'? require('./jscl'): window.jscl )
